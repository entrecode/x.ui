/// @author Bernhard Ruoff
/// @since 8.0.0-beta.4
/// @access public
/// @group layout mixins
///
/// @require {map} $breakpoints
/// @param {value} $attrName - name of the data-attribute
/// @param {value} $cssAttr - name of the used css-attribute
/// @param {map} $attrMap - map css and attribute values
/// @param {boolean} $area - set a range for the media query
/// @param {boolean} $hasRoot - sets @content for a root element without a media-query
/// @return a set of styles for one data-attribute element with all available breakpoints

@mixin set-map-breakpoints($attrName, $cssAttr, $attrMap, $area: false, $hasRoot: true) {
  $breakpointKeys: map-keys($breakpoints);
  $attrKeys: map-keys($attrMap);

  @if $hasRoot == true {
    @each $attrKey in $attrKeys {
      $v: map-get($attrMap, $attrKey);

      [data-#{$attrName}~="#{$attrKey}"] {
        #{$cssAttr}: #{$v};
      }
    }
  }

  @if $area == true {
    @each $breakpointKey in $breakpointKeys {
      @each $attrKey in $attrKeys {
        $v: map-get($attrMap, $attrKey);

        [data-#{$attrName}~="#{$attrKey}"] {
          @media (min-width: getBreakpoint(#{$breakpointKey})) and (max-width: getBreakpoint(#{$breakpointKey}, max)) {
            #{$cssAttr}: #{$v};
          }
        }
      }
    }
  } @else {
    @each $breakpointKey in $breakpointKeys {
      @each $attrKey in $attrKeys {
        $v: map-get($attrMap, $attrKey);

        [data-#{$attrName}~="#{$attrKey}"] {
          @media (min-width: getBreakpoint(#{$breakpointKey})) {
            #{$cssAttr}: #{$v};
          }
        }
      }
    }
  }
}
