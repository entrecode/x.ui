.alert {
  &.outlined {
    background-color: transparent;
    border-style: solid;
    border-color: getColor(minor);
    @include macro-metrics($alert-font-size, $alert-line-height, $alert-min-height, $alert-outlined);

    &.small {
      @include macro-metrics($alert-small-font-size, $alert-small-line-height, $alert-small-min-height, $alert-outlined);
    }

    &.big {
      @include macro-metrics($alert-big-font-size, $alert-big-line-height, $alert-big-min-height, $alert-outlined);
    }

    &.minor {
      border-color: getColor(minor);
      color: setContrast(getColor(background), getColor(minor));
    }

    &.link {
      border-color: getColor(link);
      color: setContrast(getColor(background), getColor(link));
    }

    &.super {
      border-color: getColor(super);
      color: setContrast(getColor(background), getColor(super));
    }

    &.highlight {
      border-color: getColor(highlight);
      color: setContrast(getColor(background), getColor(highlight));
    }

    &.info {
      border-color: getColor(state, info);
      color: setContrast(getColor(background), getColor(state, info));
    }

    &.error {
      border-color: getColor(state, error);
      color: setContrast(getColor(background), getColor(state, error));
    }

    &.success {
      border-color: getColor(state, success);
      color: setContrast(getColor(background), getColor(state, success));
    }

    &.warning {
      border-color: getColor(state, warning);
      color: setContrast(getColor(background), getColor(state, warning));
    }

    &.invert {
      border-color: getColor(text, invert);
      color: getColor(text, invert);
    }
  }
}