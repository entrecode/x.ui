/// typo
/// @author Bernhard Ruoff
/// @since 0.0.1

//
// Link styles
// --------

a {
  color: getColor(base, link);
  @include transition(color .2s);
  cursor: pointer;

  * {
    cursor: pointer;
  }

  &:hover {
    color: getColor(base, linkHover);
  }
}

//
// Paragraph styles
// --------

p {
  margin: rem(8) 0;

  &.small {
    vertical-align: baseline;
    font-size: rem(12);
    line-height: rem(16);
  }

  &.big,
  &.lead {
    font-size: em(18);
    line-height: em(28, 18);
    font-weight: $light;
  }

  strong,
  small {
    vertical-align: baseline;
  }
}

//
// Defaults
// --------

i,
em {
  font-style: italic;
}

b,
strong {
  font-weight: bold;
}

small {
  font-size: 75%;
  vertical-align: baseline;
}

u {
  text-decoration: underline;
}

sup,
sub {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

s {
  text-decoration: line-through;
}


//
// Abbreviations
// -------------

abbr[title] {
  cursor: help;
}

//
// Pre, Code, and User Input
// -------------------------

code,
pre,
kbd,
samp {
  font-size: em(14);
}

code {
  vertical-align: middle;
  white-space: nowrap;
}

pre code {
  white-space: pre;
}

kbd {
  display: inline-block;
  line-height: 1.75;
  white-space: nowrap;
}

samp {
  vertical-align: bottom;
}

//
// Addresses
// ---------

address {
  font-style: normal;
}

mark {
  background-color: transparent;
  color: getColor(base, highlight);
  vertical-align: baseline;
}

//
// Generated text color styles
// ---------

.text-default {
  color: getColor(base, text) !important;
}

.text-light {
  color: getColor(text, light) !important;
}

.text-lighter {
  color: getColor(text, lighter) !important;
}

.text-lightest {
  color: getColor(text, lightest) !important;
}

.text-invert {
  color: getColor(text, invert) !important;
}

.text-link {
  color: getColor(base, link) !important;
}

.text-minor {
  color: getColor(base, minor) !important;
}

.text-super {
  color: getColor(base, super) !important;
}

.text-highlight {
  color: getColor(base, highlight) !important;
}

.text-info {
  color: getColor(state, info) !important;
}

.text-disabled {
  color: getColor(state, disabled) !important;
}

.text-error {
  color: getColor(state, error) !important;
}

.text-success {
  color: getColor(state, success) !important;
}

.text-warning {
  color: getColor(state, warning) !important;
}


//
// text overflow behavior styles
// --------


// no text wrapping
.nowrap {
  white-space: nowrap;
  vertical-align: baseline;
}

// use automatic text wrapping
.hyphen {
  @include word-wrap;
}

// use automatic text wrapping with justification
.hyphen-block {
  text-align: justify;
  @include word-wrap;
}

// automatic text cut off with ...
.ellipsis {
  @include ellipsis;
  display: block;
}