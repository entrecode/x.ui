/// button styles
/// @author Bernhard Ruoff
/// @since 0.0.2
///
/// @param {boolean} $btn-round - can be set in config.scss
/// @param {string} $btn-weight - for font-weight. can be set in config.scss
/// @param {number} $btn-radius - for default button radius. can be set in config.scss
/// @param {number} $btn-wide -  button width for .wide . can be set in config.scss
/// @param {number} $btn-wide-small - button width for .wide.small . can be set in config.scss

//placeholder for button metrics
%btn {
  // button core style
  @include appearance(none);
  @include user-select(none);
  outline: none;
  border: none;
  cursor: pointer;
  touch-action: manipulation;
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  text-decoration: none;
  position: relative;
  height: auto;
  border: 1px solid transparent;

  // button typo style
  font-family: $btn-font-family;
  font-size: rem($btn-font-size);
  line-height: rem(nearest($btn-font-size, $btn-line-height, 4));
  font-weight: $btn-weight;
  min-width: rem(40);
  margin: rem(4);
  padding: rem(8) rem(16);

  // additional styles via config
  @extend %btn-style !optional;

  // small buttons
  &.small {
    font-size: rem($btn-small-font-size);
    line-height: rem(nearest($btn-small-font-size, $btn-small-line-height, 4));
    font-weight: $btn-small-weight;
    min-width: rem(24);
    @include border-radius(rem($btn-small-radius));

    // additional styles via config
    @extend %btn-small-style !optional;

    .ec-icon {
      &:before {
        font-size: rem(14);
        line-height: rem(24);
      }
    }
  }

  // big buttons
  &.big {
    font-size: rem($btn-big-font-size);
    line-height: rem(nearest($btn-big-font-size, $btn-big-line-height, 4));
    font-weight: $btn-big-weight;
    padding: rem(10) rem(16);
    @include border-radius(rem($btn-big-radius));

    // additional styles via config
    @extend %btn-big-style !optional;

    .ec-icon {
      &:before {
        font-size: rem(28);
        line-height: rem(28);
      }
    }
  }

  // buttons with a minimum width
  &.wide {
    min-width: $btn-wide;

    &.small {
      min-width: $btn-small-wide;
    }

    &.big {
      min-width: $btn-big-wide;
    }
  }

  // full-width buttons
  &.block {
    width: 100%;
    display: block;
    margin-left: 0;
    margin-right: 0;
  }
}

.btn {
  @extend %btn;

  // button core style
  @include transition(background-color .2s);

  // button default color style
  @include setText(base, link);
  @include border-radius(rem($btn-radius));

  * {
    cursor: pointer;
  }

  strong {
    vertical-align: baseline;
  }

  // default :hover and .active state
  &.active,
  &:hover,
  &:focus {
    @include setText(base, linkHover, true);
    outline: none;
  }

  // disabled state style for buttons
  &.disabled,
  &[disabled] {
    opacity: .6;
    cursor: not-allowed;
    @include box-shadow(none);
  }

  // little transform animation onclick
  &:active {
    @include transform(translate3d(0, 2px, 0));
  }

  // ec-icon styles for default btn
  .ec-icon {
    display: inline;

    &:before {
      padding-right: rem(8);
      vertical-align: top;
    }

    &:empty {
      margin-left: rem(-16);
      margin-right: rem(-16);

      &:before {
        padding-right: 0;
      }
    }
  }

  // minor button style, for secondary or minor interactions
  &.minor {
    @include setText(base, minor, true);

    &.active,
    &:hover,
    &:focus {
      @include setText(base, minorHover, true);
    }
  }

  // super button style, for call to action
  &.super {
    @include setText(base, super, true);

    &.active,
    &:hover,
    &:focus {
      @include setText(base, superHover, true);
    }
  }

  // invert button style
  &.invert {
    @include setText(base, background, true);

    &.active,
    &:hover,
    &:focus {
      color: getColor(base, linkHover);
    }
  }

  // clear button style, for link-alike buttons
  &.clear {
    background-color: transparent;
    color: getColor(base, link);

    &.active,
    &:hover,
    &:focus {
      background-color: getColor(state, hover);
      color: getColor(base, linkHover);
    }
  }

  // outlined button style

  &.outlined {
    background-color: transparent !important;
    color: getColor(base, link);
    border-color: getColor(base, link);

    &.active,
    &:hover,
    &:focus {
      color: getColor(base, linkHover);
      background-color: transparent;
      border-color: getColor(base, linkHover);
    }

    &.minor {
      color: getColor(base, link);
      border-color: getColor(base, minor);

      &.active,
      &:hover,
      &:focus {
        color: getColor(base, link);
        border-color: getColor(base, minorHover);
      }
    }

    &.super {
      color: getColor(base, super);
      border-color: getColor(base, super);

      &.active,
      &:hover,
      &:focus {
        color: getColor(base, superHover);
        border-color: getColor(base, superHover);
      }
    }

    &.invert {
      color: getColor(text, invert);
      border-color: getColor(base, background);

      &.active,
      &:hover,
      &:focus {
        color: getColor(text, invert);
        border-color: getColor(base, background);
      }
    }
  }

  // additional embossed class
  &.raised {
    @include btn-raised;
  }

  &.round {
    @include border-radius(rem(20));

    &.small {
      @include border-radius(rem(12));
    }

    &.big {
      @include border-radius(rem(24));
    }
  }
}

/// sets buttons to rounded
/// @param {boolean} $btn-round - can be set in config.scss

@if $btn-round == true {
  .btn {
    @include border-radius(rem(20));

    &.small {
      @include border-radius(rem(12));
    }

    &.big {
      @include border-radius(rem(24));
    }
  }
}

/// make button glow
.glowing {
  position: relative;
  display: inline-block;
  z-index: 10;

  .btn {
    @extend %glow !optional;
  }
}