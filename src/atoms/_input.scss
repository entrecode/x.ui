/// @author Bernhard Ruoff
/// @since 8.0.0-beta.5
/// @access public
/// @group atoms
///
/// @param {color} $input-background [$background] - background-color of input
/// @param {color} $input-color [$text] - text color of input
/// @param {color} $input-placeholder [$text-light] - text color of input placeholder
/// @param {array} $input-spacing [0]
///
/// @param {number} $input-font-size [16]
/// @param {number} $input-line-height [24]
/// @param {number} $input-min-height [32]
///
/// @param {number} $input-small-font-size [14]
/// @param {number} $input-small-line-height [18]
/// @param {number} $input-small-min-height [28]
///
/// @param {number} $input-big-font-size [18]
/// @param {number} $input-big-line-height [24]
/// @param {number} $input-big-min-height [40]
///
/// @param {number} $input-border-width [1]
///
/// @param {boolean} $input-round [false] - sets border-radius to 50% of input height
///
/// @param {array} $input-radius [4]
/// @param {array} $input-small-radius [$input-radius]
/// @param {array} $input-big-radius [$input-radius]

// scss-lint:disable QualifyingElement

%input {
  @extend %input-style !optional;
  @include macro-metrics(
    $input-font-size,
    $input-line-height,
    $input-min-height,
    $input-border-width,
    $input-padding-ratio
  );
  background-color: $input-background;
  border-color: $input-border-color;
  border-radius: arrayMagic($input-radius);
  border-style: solid;
  color: $input-color;
  display: block;
  flex-grow: 1;
  margin: arrayMagic($input-spacing);
  outline: none;
  text-align: left;
  width: 100%;

  @include placeholder {
    color: $input-placeholder;
  }
}

.input {
  @extend %input;

  ///
  /// states
  /// ------------------------------------------------------

  &:focus {
    outline: none;
  }

  &:focus,
  &:hover {
    box-shadow: inset 0 0 0 2px getColor(state, hover);

    @include placeholder {
      color: $input-color;
    }
  }

  &:focus:hover {
    @include placeholder {
      color: $input-placeholder;
    }
  }

  &.is-disabled,
  &[disabled] {
    cursor: not-allowed;
    opacity: 0.4;
  }

  @at-root select.input {
    height: em($input-min-height, $input-font-size);

    &[multiple] {
      height: auto;
    }

    option {
      padding: 0 rem(8);
    }
  }

  @at-root textarea.input {
    height: auto;
    resize: vertical;
  }

  &_clear {
    @include macro-metrics(
      $input-font-size,
      $input-line-height,
      $input-min-height
    );
    border: 0;

    &:focus,
    &:hover {
      box-shadow: none;
    }
  }

  /// reset for webkit-autofill background
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus,
  &:-webkit-autofill:active {
    color: getColor(text);
    -webkit-text-fill-color: getColor(text);
    transition: background-color 5000s ease-in-out 0s;
  }

  &_invert {
    background-color: transparent;
    border-color: getColor(text, invert);
    color: getColor(text, invert);

    @include placeholder {
      color: rgba(getColor(text, invert), 0.6);
    }

    &:focus,
    &:hover {
      border-color: getColor(text, invert);

      @include placeholder {
        color: getColor(text, invert);
      }
    }
  }
}

///
/// size modifier
/// ------------------------------------------------------

.input_small {
  @extend %input-small-style !optional;
  @include macro-metrics(
    $input-small-font-size,
    $input-small-line-height,
    $input-small-min-height,
    $input-border-width
  );
  border-radius: arrayMagic($input-small-radius);

  @at-root select.input_small {
    height: em($input-small-min-height, $input-small-font-size);
  }

  &.input_clear {
    @include macro-metrics(
      $input-small-font-size,
      $input-small-line-height,
      $input-small-min-height
    );
    border: 0;
  }
}

.input_big {
  @extend %input-big-style !optional;
  @include macro-metrics(
    $input-big-font-size,
    $input-big-line-height,
    $input-big-min-height,
    $input-border-width
  );
  border-radius: arrayMagic($input-big-radius);

  @at-root select.input_small {
    height: em($input-big-min-height, $input-big-font-size);
  }

  &.input_clear {
    @include macro-metrics(
      $input-big-font-size,
      $input-big-line-height,
      $input-big-min-height
    );
    border: 0;
  }
}

/// for fluffy round inputs
@if $input-round == true {
  .input {
    border-radius: arrayMagic($input-min-height / 2);

    &_small {
      border-radius: arrayMagic($input-small-min-height / 2);
    }

    &_big {
      border-radius: arrayMagic($input-big-min-height / 2);
    }
  }
}

/// Keep the original size
input[type='checkbox'],
input[type='file'],
input[type='image'],
input[type='radio'] {
  display: inline-block;
  height: auto;
  width: auto;
}

/// Checkbox & radio
input[type='checkbox'],
input[type='radio'] {
  line-height: normal;
  padding: 0;
  vertical-align: middle;

  + small {
    cursor: pointer;
    display: inline-block;
  }
}
