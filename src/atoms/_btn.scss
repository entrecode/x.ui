/// @author Bernhard Ruoff
/// @since 9.0.1
/// @access public
/// @group atoms
///
/// @param {variable} $btn-font-family - can be set in config.scss
///
/// @param {number} $btn-font-size - normal button font-size
/// @param {number} $btn-line-height - normal button line-height
/// @param {variable} $btn-weight - normal button font-weight
/// @param {number} $btn-min-height - min-height of default btn
///
/// @param {variable} $btn-small-font-size - small button font-size
/// @param {variable} $btn-small-line-height - small button line-height
/// @param {variable} $btn-small-weight - small button font-weight
/// @param {number} $btn-small-min-height - min-height of small btn
///
/// @param {variable} $btn-big-font-size - big button font-size
/// @param {variable} $btn-big-line-height - big button line-height
/// @param {variable} $btn-big-weight - big button font-weight
/// @param {number} $btn-big-min-height - min-height of big btn
///
/// @param {number} $btn-padding-ratio [2] - ratio by which padding-left and padding-right are bigger
/// @param {array} $btn-spacing [0]
/// @param {boolean} $btn-round - sets buttons to rounded buttons
/// @param {number} $btn-radius - radius for default button
/// @param {number} $btn-small-radius - radius for small button
/// @param {number} $btn-big-radius - radius for big button
/// @param {number} $btn-wide -  min width for .btn_wide button
/// @param {number} $btn-small-wide - min width for .btn_wide.btn_small button
/// @param {number} $btn-big-wide - min width for .btn_wide.btn_big button
///
/// @param {boolean} $flex-support - sets buttons to display flex

/// placeholder for button metrics
%btn {
  /// button core style
  appearance: none;
  user-select: none;
  outline: none;
  cursor: pointer;
  touch-action: manipulation;
  text-align: center;
  vertical-align: middle;
  text-decoration: none;
  position: relative;
  height: auto;
  border: 0;
  margin: arrayMagic($btn-spacing);

  @if $flex-support == false {
    display: inline-block;
  } @else {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  /// button typo style
  font-family: $btn-font-family;
  font-weight: $btn-weight;

  @include macro-metrics(
    $btn-font-size,
    $btn-line-height,
    $btn-min-height,
    $padding-ratio: $btn-padding-ratio
  );

  /// ec-icon styles for default btn
  .ec-icon {
    @if $flex-support == false {
      display: inline;
    }

    &::before {
      line-height: inherit;
      padding-right: rem(8);
      vertical-align: top;
    }

    &:empty::before {
      padding-right: 0;
    }
  }

  &%small {
    font-weight: $btn-small-weight;
    border-radius: arrayMagic($btn-small-radius);
    @include macro-metrics(
      $btn-small-font-size,
      $btn-small-line-height,
      $btn-small-min-height,
      $padding-ratio: $btn-padding-ratio
    );
  }

  &%big {
    font-weight: $btn-big-weight;
    border-radius: arrayMagic($btn-big-radius);
    @include macro-metrics(
      $btn-big-font-size,
      $btn-big-line-height,
      $btn-big-min-height,
      $padding-ratio: $btn-padding-ratio
    );
  }
}

.btn {
  @extend %btn !optional;
  transition: $btn-transition;
  border-radius: arrayMagic($btn-radius);
  @include set-theme-colors(getColor(link));

  /// additional styles via config
  @extend %btn-style !optional;

  * {
    cursor: pointer;
  }

  strong {
    vertical-align: baseline;
  }

  ///
  /// states
  /// ------------------------------------------------------

  /// default :hover and .is-active state
  &.is-active,
  &:hover,
  &:focus {
    @include set-theme-colors(setHover($link));
    outline: none;
  }

  /// disabled state style for buttons
  &.is-disabled,
  &[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
    box-shadow: none;
  }

  /// little transform animation onclick
  &:active {
    transform: translateY(2px);
  }

  ///
  /// sizes
  /// ------------------------------------------------------

  /// small buttons
  &.btn_small {
    @extend %btn%small;

    /// additional styles via config
    @extend %btn-small-style !optional;
  }

  /// big buttons
  &.btn_big {
    @extend %btn%big;

    /// additional styles via config
    @extend %btn-big-style !optional;
  }

  /// buttons with a minimum width
  &.btn_wide {
    min-width: rem($btn-wide);

    &.btn_small {
      min-width: rem($btn-small-wide);
    }

    &.btn_big {
      min-width: rem($btn-big-wide);
    }
  }

  /// full-width buttons
  &.btn_block {
    width: 100%;

    @if $flex-support == false {
      display: block;
    } @else {
      display: flex;
    }
  }
}

///
/// Styles
/// ------------------------------------------------------

/// minor button style, for secondary or minor interactions
.btn_minor {
  @include set-theme-colors(getColor(minor));

  &.is-active,
  &:hover,
  &:focus {
    @include set-theme-colors(setHover($minor));
  }
}

/// super button style, for call to action
.btn_super {
  @include set-theme-colors(getColor(super));

  &.is-active,
  &:hover,
  &:focus {
    @include set-theme-colors(setHover($super));
  }
}

.btn_mono {
  @include set-theme-colors(getColor(background, invert));

  &.is-active,
  &:hover,
  &:focus {
    @include set-theme-colors(
      setHover(getColor(background, invert)),
      getColor(link)
    );
  }
}

/// invert button style
.btn_invert {
  @include set-theme-colors(getColor(background), getColor(link));

  &.is-active,
  &:hover,
  &:focus {
    @include set-theme-colors(getColor(background), getColor(link));
  }

  &.btn_mono {
    @include set-theme-colors(getColor(background));
  }
}

/// clear button style, for link-alike buttons
.btn_clear {
  background-color: transparent;
  color: getColor(link);

  &.is-active,
  &:hover,
  &:focus {
    background-color: getColor(state, hover);
    color: setHover($link);
  }

  &.btn_mono {
    color: getColor(text);
  }

  &.btn_minor {
    color: setContrast(getColor(background), getColor(minor));
  }

  &.btn_super {
    color: setContrast(getColor(super), getColor(super));
  }

  &.btn_invert {
    color: setContrast(getColor(background, invert), getColor(link));

    &.is-active,
    &:hover,
    &:focus {
      background-color: invert(getColor(state, hover));
      color: setContrast(getColor(background, invert), getColor(link));
    }

    &.btn_mono {
      color: getColor(text, invert);
      background-color: transparent;
    }
  }
}

/// for fluffy round buttons
/// @param {boolean} $btn-round - can be set in config.scss

@if $btn-round == true {
  .btn {
    border-radius: arrayMagic($btn-min-height / 2);

    &.btn_small {
      border-radius: arrayMagic($btn-small-min-height / 2);
    }

    &.btn_big {
      border-radius: arrayMagic($btn-big-min-height / 2);
    }
  }
}
