/// @author Bernhard Ruoff
/// @since 10.0.0
/// @access public
/// @group macro mixins
///
/// mixin for precise macro element sizing
/// @deprecated since 10.0.0
/// @param {number} $font-size - font-size of element
/// @param {number} $line-height - line-height of element
/// @param {number} $min-height - min-height of element
/// @param {number} $border [null] - size of element border
/// @param {number} $padding-ratio [2] - ratio by which padding-left and padding-right are bigger
/// @param {boolean} $inline-styles [true] - to return styles for .tag and .ec-icon
/// @param {number} $icon-size [$base-font-size] - font-size of inline .ec-icon

@mixin macro-metrics(
  $font-size,
  $line-height,
  $min-height,
  $border: null,
  $padding-ratio: 2,
  $inline-styles: true,
  $icon-size: $base-font-size
) {
  $padding: false;

  // check if $min-height is a number, some of the styles will not be rendered
  @if type-of($min-height) == 'number' {
    $padding: ($min-height - $line-height) / 2;
  } @else {
    $padding: ($line-height - $font-size);
  }

  @if $border {
    $padding: ($padding - $border);
  }

  padding: arrayMagic($padding ($padding * $padding-ratio));

  font-size: rem($font-size);
  line-height: rem($line-height);
  min-height: rem($min-height);
  min-width: rem($min-height);

  @if $border {
    border-style: solid;
    border-width: rem($border);
  }

  @content;

  @if $inline-styles and $padding {
    .tag {
      &:first-child {
        margin-left: rem($padding * -1);
        margin-right: rem($padding);
      }

      &:last-child {
        margin-left: rem($padding);
        margin-right: rem($padding * -1);
      }

      &:only-child {
        margin-left: rem($padding * -$padding-ratio);
        margin-right: rem($padding * -$padding-ratio);
      }
    }

    .ec-icon {
      padding-right: rem($padding);

      @supports (display: inline-flex) {
        display: inline-flex;
        align-items: center;
        justify-content: center;
      }

      &::before {
        font-size: em($icon-size, $font-size);
        line-height: inherit;
        vertical-align: top;
      }

      &_right {
        padding-left: rem($padding);
        padding-right: 0;
      }

      &:empty {
        padding-left: 0;
        padding-right: 0;

        &:first-child {
          margin-left: rem($padding * -0.5);
          margin-right: rem($padding);
        }

        &:last-child {
          margin-left: rem($padding);
          margin-right: rem($padding * -0.5);
        }

        &:only-child {
          margin-left: rem($padding * -$padding-ratio);
          margin-right: rem($padding * -$padding-ratio);
        }

        &::before {
          margin-left: 0;
          margin-right: 0;
        }
      }
    }
  }
}
