/// @author Bernhard Ruoff
/// @since 8.0.0-beta.4
/// @access public
/// @group layout mixins
///
/// @require {map} $breakpoints
/// @param {string} $attr-name - name of the data-attribute
/// @param {string} $css-attr - name of the used css-attribute
/// @param {map} $attr-map - map css and attribute values
/// @param {boolean} $area - set a range for the media query
/// @param {boolean} $hasRoot - sets @content for a root element without a media-query
/// @return a set of styles for one data-attribute element with all available breakpoints

@mixin set-map-breakpoints(
  $attr-name,
  $css-attr,
  $attr-map,
  $area: false,
  $has-root: true
) {
  $_bp-keys: map-keys($breakpoints);
  $_attr-keys: map-keys($attr-map);

  @if $has-root == true {
    @each $_attr-key in $_attr-keys {
      $v: map-get($attr-map, $_attr-key);

      [data-#{$attr-name}~='#{$_attr-key}'] {
        #{$css-attr}: #{$v};
      }
    }
  }

  @if $area == true {
    @each $_bp-key in $_bp-keys {
      @each $_attr-key in $_attr-keys {
        $v: map-get($attr-map, $_attr-key);

        [data-#{$attr-name}~='#{$_attr-key}'] {
          @media (min-width: bp(#{$_bp-key})) and (max-width: bp(#{$_bp-key}, max)) {
            #{$css-attr}: #{$v};
          }
        }
      }
    }
  } @else {
    @each $_bp-key in $_bp-keys {
      @each $_attr-key in $_attr-keys {
        $v: map-get($attr-map, $_attr-key);

        [data-#{$attr-name}~='#{$_attr-key}'] {
          @media (min-width: bp(#{$_bp-key})) {
            #{$css-attr}: #{$v};
          }
        }
      }
    }
  }
}
