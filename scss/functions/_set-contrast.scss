/// @author Bernhard Ruoff
/// @since 10.0.0
/// @access public
/// @group color-functions
///
/// sets a contrast color based on the Web Content Accessibility Guidelines (WCAG)
/// @link https://www.w3.org/TR/AERT#color-contrast
/// @link http://contrastchecker.com/

//
// get-brightness
// ----------------------------------------------------------------------------
// @param {color} $_c
// @return {decimal} This algorithm is taken from a formula for converting RGB
// values to YIQ values. This brightness value gives a perceived brightness for
// a color.
@function get-brightness($_c) {
  @return ((red($_c) * 299) + (green($_c) * 587) + (blue($_c) * 587)) / 1000;
}

//
// brightness-difference
// ----------------------------------------------------------------------------
// @param {color} $_c1
// @param {color} $_c2
// @return {number} - an absolute number for the perceived brightness
// difference of two colors.
@function brightness-difference($_c1, $_c2) {
  @return abs(get-brightness($_c1) - get-brightness($_c2));
}

//
// color-difference
// ----------------------------------------------------------------------------
// @param {color} $_c1
// @param {color} $_c2
// @return {number} - color difference
@function color-difference($_c1, $_c2) {
  @return max(red($_c1), red($_c2)) - min(red($_c1), red($_c2)) +
    max(green($_c1), green($_c2)) - min(green($_c1), green($_c2)) +
    max(blue($_c1), blue($_c2)) - min(blue($_c1), blue($_c2));
}

//
// color-pass
// ----------------------------------------------------------------------------
// @require {function} brightness-difference
// @require {function} color-difference
// @param {color} $_r - reference color
// @param {color} $_c
// @param {number} $_b-thr [125] - brightness threshhold 125
// @param {number} $_c-thr [500] - color threshhold is 500
// @return {boolean}
@function color-pass($_r, $_c, $_b-thr: 125, $_c-thr: 500) {
  $_b-diff: brightness-difference($_r, $_c);
  $_c-diff: color-difference($_r, $_c);
  @return if($_b-diff > $_b-thr and $_c-diff > $_c-thr, true, false);
}

//
// color-margin
// ----------------------------------------------------------------------------
// @require {function} brightness-difference
// @require {function} color-difference
// @param {color} $_r - reference color
// @param {color} $_c
// @param {number} $_b-thr [125] - brightness threshhold 125
// @param {number} $_c-thr [500] - color threshhold is 500
// @return {boolean}
@function color-margin($_r, $_c, $_b-thr: 125, $_c-thr: 500) {
  $_b-diff: brightness-difference($_r, $_c);
  $_c-diff: color-difference($_r, $_c);
  @return if($_b-diff > $_b-thr or $_c-diff > $_c-thr, true, false);
}

//
// luma
// ----------------------------------------------------------------------------
// @require {function} pow
// @param {color} $_c
// @return calculates the perceptual brightness or luma of a color object.
@function luma($_c) {
  $_r: red($_c) / 255;
  $_g: green($_c) / 255;
  $_b: blue($_c) / 255;
  $_r: if($_r < 0.03928, $_r / 12.92, pow(($_r + 0.055) / 1.055, 2.4));
  $_g: if($_g < 0.03928, $_g / 12.92, pow(($_g + 0.055) / 1.055, 2.4));
  $_b: if($_b < 0.03928, $_b / 12.92, pow(($_b + 0.055) / 1.055, 2.4));
  $_l: (0.2126 * $_r + 0.7152 * $_g + 0.0722 * $_b);
  @return $_l;
}

//
// contrast-ratio
// ----------------------------------------------------------------------------
// @require {function} luma
// @param {color} $_c1 - reference color
// @param {color} $_c2
// @return {number} contrast ratios can range from 1 to 21

@function contrast-ratio($_c1, $_c2) {
  $_l1: luma($_c1);
  $_l2: luma($_c2);
  @return round((max($_l1, $_l2) + 0.05) / (min($_l1, $_l2) + 0.05) * 100) / 100;
}

//
// check-compliance
// ----------------------------------------------------------------------------
// @link https://www.w3.org/TR/WCAG/#contrast-ratiodef
// @require {function} contrast-ratio
// @param {color} $_r - reference color
// @param {color} $_c
// @param {decimal} $_wcag - WBAG compliance values (aaa: 7, aa: 4.5)
// @return {boolean} - checks if a color meets the WCAG

@function check-compliance($_r, $_c, $_wcag) {
  $_ratio: contrast-ratio($_r, $_c);
  @if ($_ratio >= $_wcag) {
    @return true;
  } @else {
    @return false;
  }
}


//
// find-contrast-loop
// ----------------------------------------------------------------------------
// loop to find color shade with best contrast
// @require {function} color-difference
// @require {function} color-pass
// @require {function} color-margin
// @require {function} contrast-ratio
// @require {function} check-compliance
// @param {color} $_color - reference color
// @param {color} $_lighter-hue - lighter-shade color
// @param {color} $_darker-hue - darker-shade color
// @return {color}

@function find-contrast-loop($_color, $_lighter-hue, $_darker-hue) {
  $_list: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100;
  $_last: nth($_list, length($_list));
  $_final-color: null;
  $_aa: 7;
  $_aaa: 4.5;


  @each $percent in $_list {
    // darker variant
    $_darker: darken($_darker-hue, $percent);
    $_darker-color-diff: color-difference($_color, $_darker);
    $_darker-pass: color-pass($_color, $_darker);
    $_darker-margin: color-margin($_color, $_darker);
    $_darker-contrast: contrast-ratio($_color, $_darker);
    $_darker-aa: check-compliance($_color, $_darker, $_aa);
    $_darker-aaa: check-compliance($_color, $_darker, $_aaa);

    // lighter variant
    $_lighter: lighten($_lighter-hue, $percent);
    $_lighter-color-diff: color-difference($_color, $_lighter);
    $_lighter-pass: color-pass($_color, $_lighter);
    $_lighter-margin: color-margin($_color, $_lighter);
    $_lighter-contrast: contrast-ratio($_color, $_lighter);
    $_lighter-aa: check-compliance($_color, $_lighter, $_aa);
    $_lighter-aaa: check-compliance($_color, $_lighter, $_aaa);

    @if $_lighter-pass {
      @return $_lighter;
    }

    @if $_darker-pass {
      @return $_darker;
    }

    @if $_lighter-margin and $_lighter-aaa {
      @return $_lighter;
    }

    @if $_darker-margin and $_lighter-aaa {
      @return $_darker;
    }

    @if $percent == $_last {
      @if $_lighter-contrast > $_darker-contrast {
        $_final-color: $_lighter;
      } @else {
        $_final-color: $_darker;
      }
      @if $_lighter-aa {
        $_final-color: $_lighter;
      }
      @if $_darker-aa {
        $_final-color: $_darker;
      }
      @if $_lighter-aaa {
        $_final-color: $_lighter;
      }
      @if $_darker-aaa {
        $_final-color: $_darker;
      }
      @if $_lighter-margin and $_lighter-color-diff > $_darker-color-diff {
        $_final-color: $_lighter;
      }
      @if $_darker-margin and $_lighter-color-diff < $_darker-color-diff {
        $_final-color: $_darker;
      }
      @return $_final-color;
    }
  }
}

//
// set-contrast
// ----------------------------------------------------------------------------
// @param {color} $color - reference color
// @param {color} $hue - tweaks the output towards a specific hue
// @require {function} flatten-color - returns an absolute color for colors with alpha transparency
// @require {function} find-contrast-loop
// @require {color} $darker-fallback
// @require {color} $lighter-fallback
//
// @return {color} contrast color, that meets the WCAG

@function set-contrast($color, $hue: $color) {
  // remove transparency
  @if (alpha($color) < 1) {
    $color: flatten-color($color);
  }

  @if (alpha($hue) < 1) {
    $hue: flatten-color($hue);
  }

  @if $hue == $color {
    @return find-contrast-loop($color, $lighter-fallback, $darker-fallback);
  } @else {
    @return find-contrast-loop($color, $hue, $hue);
  }
}
